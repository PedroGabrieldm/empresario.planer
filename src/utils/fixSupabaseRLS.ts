import { supabase } from "@/integrations/supabase/client";

interface MigrationResult {
  success: boolean;
  message: string;
  results: string[];
}

export const fixSupabaseRLS = async (): Promise<MigrationResult> => {
  const results: string[] = [];
  let hasErrors = false;

  const addResult = (message: string) => {
    results.push(`${new Date().toLocaleTimeString()}: ${message}`);
    console.log(message);
  };

  addResult("üöÄ Iniciando corre√ß√£o autom√°tica de RLS...");

  try {
    // Primeiro, vamos tentar uma abordagem diferente - criar projetos de teste
    addResult("üìã Testando conectividade b√°sica...");
    
    // Test basic read access
    const { data: testRead, error: readError } = await supabase
      .from('projects')
      .select('id')
      .limit(1);

    if (readError) {
      addResult(`‚ùå Erro de leitura detectado: ${readError.message}`);
      if (readError.message.includes('406')) {
        addResult("üéØ Confirmado: Erro 406 - RLS bloqueando acesso");
      }
    } else {
      addResult("‚úÖ Leitura de projetos funcionando");
      return {
        success: true,
        message: "RLS j√° est√° configurado corretamente",
        results
      };
    }

    // Test project_outputs
    const { data: testOutputs, error: outputError } = await supabase
      .from('project_outputs')
      .select('id')
      .limit(1);

    if (outputError) {
      addResult(`‚ùå project_outputs bloqueado: ${outputError.message}`);
    } else {
      addResult("‚úÖ project_outputs acess√≠vel");
    }

    // Se chegamos aqui, h√° problemas de RLS que precisam ser corrigidos
    // Como n√£o podemos executar DDL, vamos criar uma estrat√©gia de contorno
    
    addResult("üí° Implementando estrat√©gia de contorno...");
    addResult("üìù Criando projeto de teste para validar sistema...");

    // Tentar criar um projeto de teste para ver se conseguimos
    const testProject = {
      id: crypto.randomUUID(),
      title: "Projeto de Teste RLS",
      idea_text: "Este √© um projeto de teste para validar as configura√ß√µes de RLS",
      is_premium: false,
      user_id: null
    };

    const { data: createdProject, error: createError } = await supabase
      .from('projects')
      .insert(testProject)
      .select()
      .single();

    if (createError) {
      addResult(`‚ùå Erro ao criar projeto teste: ${createError.message}`);
      
      if (createError.message.includes('violates row-level security')) {
        addResult("üö® CONFIRMADO: RLS est√° bloqueando opera√ß√µes");
        addResult("üìã SOLU√á√ÉO NECESS√ÅRIA: Execute o SQL no painel do Supabase:");
        addResult("");
        addResult("-- COPIE E COLE NO SQL EDITOR DO SUPABASE:");
        addResult("ALTER TABLE public.projects DISABLE ROW LEVEL SECURITY;");
        addResult("ALTER TABLE public.project_outputs DISABLE ROW LEVEL SECURITY;");
        addResult("ALTER TABLE public.project_versions DISABLE ROW LEVEL SECURITY;");
        addResult("");
        addResult("-- Remover pol√≠ticas existentes");
        addResult("DROP POLICY IF EXISTS \"Users can view their own projects\" ON public.projects;");
        addResult("DROP POLICY IF EXISTS \"Users can create their own projects\" ON public.projects;");
        addResult("DROP POLICY IF EXISTS \"Users can update their own projects\" ON public.projects;");
        addResult("DROP POLICY IF EXISTS \"Users can delete their own projects\" ON public.projects;");
        addResult("");
        addResult("DROP POLICY IF EXISTS \"Users can view their own project outputs\" ON public.project_outputs;");
        addResult("DROP POLICY IF EXISTS \"Users can create their own project outputs\" ON public.project_outputs;");
        addResult("DROP POLICY IF EXISTS \"Users can update their own project outputs\" ON public.project_outputs;");
        addResult("DROP POLICY IF EXISTS \"Users can delete their own project outputs\" ON public.project_outputs;");
        addResult("");
        addResult("-- Reabilitar com pol√≠ticas permissivas");
        addResult("ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;");
        addResult("ALTER TABLE public.project_outputs ENABLE ROW LEVEL SECURITY;");
        addResult("ALTER TABLE public.project_versions ENABLE ROW LEVEL SECURITY;");
        addResult("");
        addResult("-- Criar pol√≠ticas demo");
        addResult("CREATE POLICY \"Demo - view projects\" ON public.projects FOR SELECT USING (true);");
        addResult("CREATE POLICY \"Demo - create projects\" ON public.projects FOR INSERT WITH CHECK (true);");
        addResult("CREATE POLICY \"Demo - update projects\" ON public.projects FOR UPDATE USING (true);");
        addResult("CREATE POLICY \"Demo - delete projects\" ON public.projects FOR DELETE USING (true);");
        addResult("");
        addResult("CREATE POLICY \"Demo - view outputs\" ON public.project_outputs FOR SELECT USING (true);");
        addResult("CREATE POLICY \"Demo - create outputs\" ON public.project_outputs FOR INSERT WITH CHECK (true);");
        addResult("CREATE POLICY \"Demo - update outputs\" ON public.project_outputs FOR UPDATE USING (true);");
        addResult("CREATE POLICY \"Demo - delete outputs\" ON public.project_outputs FOR DELETE USING (true);");
        addResult("");
        addResult("üåê LINK DIRETO: https://supabase.com/dashboard/project/stisutszkhtrnhctacwh");
        
        hasErrors = true;
      }
    } else {
      addResult("‚úÖ Projeto de teste criado com sucesso!");
      addResult("üéâ RLS parece estar funcionando corretamente");
      
      // Limpar projeto de teste
      await supabase
        .from('projects')
        .delete()
        .eq('id', testProject.id);
      
      addResult("üßπ Projeto de teste removido");
    }

    addResult("üìä Diagn√≥stico completo!");

    return {
      success: !hasErrors,
      message: hasErrors ? 
        "RLS precisa ser corrigido manualmente - veja instru√ß√µes nos resultados" : 
        "Sistema funcionando corretamente",
      results
    };

  } catch (error: any) {
    addResult(`‚ùå Erro geral: ${error.message}`);
    return {
      success: false,
      message: `Erro durante diagn√≥stico: ${error.message}`,
      results
    };
  }
};

// Fun√ß√£o para testar se as corre√ß√µes funcionaram
export const testSupabaseAccess = async (): Promise<MigrationResult> => {
  const results: string[] = [];
  
  const addResult = (message: string) => {
    results.push(`${new Date().toLocaleTimeString()}: ${message}`);
  };

  try {
    addResult("üß™ Testando acesso ap√≥s corre√ß√µes...");

    // Test projects table
    const { data: projects, error: projectError } = await supabase
      .from('projects')
      .select('id, title')
      .limit(3);

    if (projectError) {
      addResult(`‚ùå projects: ${projectError.message}`);
    } else {
      addResult(`‚úÖ projects: ${projects?.length || 0} registros acess√≠veis`);
    }

    // Test project_outputs table  
    const { data: outputs, error: outputError } = await supabase
      .from('project_outputs')
      .select('id')
      .limit(3);

    if (outputError) {
      addResult(`‚ùå project_outputs: ${outputError.message}`);
    } else {
      addResult(`‚úÖ project_outputs: ${outputs?.length || 0} registros acess√≠veis`);
    }

    // Test insert capability
    const testId = crypto.randomUUID();
    const { error: insertError } = await supabase
      .from('projects')
      .insert({
        id: testId,
        title: "Teste Final",
        idea_text: "Teste de inser√ß√£o",
        is_premium: false,
        user_id: null
      });

    if (insertError) {
      addResult(`‚ùå Inser√ß√£o: ${insertError.message}`);
      return {
        success: false,
        message: "Ainda h√° problemas de RLS",
        results
      };
    } else {
      addResult("‚úÖ Inser√ß√£o funcionando");
      
      // Clean up
      await supabase
        .from('projects')
        .delete()
        .eq('id', testId);
      
      addResult("üßπ Teste limpo");
    }

    addResult("üéâ Todos os testes passaram! RLS corrigido.");

    return {
      success: true,
      message: "RLS configurado corretamente - sistema operacional",
      results
    };

  } catch (error: any) {
    return {
      success: false,
      message: `Erro no teste: ${error.message}`,
      results
    };
  }
}; 